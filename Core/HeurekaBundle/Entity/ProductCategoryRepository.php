<?php

namespace Core\HeurekaBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductCategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductCategoryRepository extends EntityRepository
{
    public function setHint(\Doctrine\ORM\Query $query)
    {
        return $query->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker');
    }

    public function getProductCategoryQueryBuilder($category = null, $recursive = false)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
                ->select("hpc, p")
                ->from("CoreHeurekaBundle:ProductCategory", "hpc")
                ->leftJoin("hpc.product", "p")
                ->leftJoin("p.productCategories", "pc")
        ;
        if ($category !== null) {
            $expr = $queryBuilder->expr()->orX($queryBuilder->expr()->eq("pc.category",":category"));
            $queryBuilder->andWhere($expr)
            ->setParameter('category', $category);
            if ($recursive) {
                $categoryEntity = $this->getEntityManager()->getRepository("CoreCategoryBundle:Category")->find($category);
                if ($categoryEntity) {
                    $expr2 = $queryBuilder->expr()->andX($queryBuilder->expr()->gte("c.lft", ":cleft"), $queryBuilder->expr()->lte("c.lft", ":cright"));
                    $expr->add($expr2);
                    $queryBuilder->setParameter('cleft', $categoryEntity->getLeft());
                    $queryBuilder->setParameter('cright', $categoryEntity->getRight());
                }
            }
        }
         $queryBuilder
            ->addOrderBy("pc.position", 'asc')
            ->addOrderBy("p.id", 'asc')
        ;

        return $queryBuilder;
    }
    
    public function getProductCategoryQuery($category = null, $recursive = false)
    {
        return $this->setHint($this->getProductCategoryQueryBuilder($category, $recursive)->getQuery());
    }
    
    public function getHeurekaCategoriesArray($productIds = array(), $locale = null) 
    {
        $qb = $this->getProductCategoryQueryBuilder()
            ->select("hpc.heurekaCategory as heureka, p.id as product");
        if (!empty($productIds)) {
            $qb->andWhere($qb->expr()->in("p.id", ":productIds"))
                ->setParamater(":productIds", $productIds);
        }
        
        $query = $this->setHint($qb->getQuery());
        if ($locale) {
            $query->setHint(
                \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
                $locale // take locale from session or request etc.
            );
        }
        $result = array();
        $iterator = $query->getArrayResult();
        foreach ($iterator as $key => $entity) {
           $result[$entity['product']] = $entity;
        }

        return $result;
    }
}
